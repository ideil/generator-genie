//# Functions
//
//*


//## Maps
//
//*

@function map-deep-merge($parent-map, $child-map) {
    $result: $parent-map;
    @each $key, $value in $child-map {
        @if (not map-has-key($result, $key)) or (type-of(map-get($result, $key)) != type-of($value)) or (not (type-of(map-get($result, $key)) == map and type-of($value) == map)) {
            $result: map-merge($result, ($key: $value));
        }
        @else {
            $result: map-merge($result, ($key: map-deep-merge(map-get($result, $key), $value)));
        }
    }
    @return $result;
}

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}


//## Helpers
//
//*

@function get-num($value) {
    @return $value / ($value * 0 + 1);
}

@function rem($value, $factor: 1) {
    @return 1/$fs-browser * get-num($value) * 1rem * $factor;
}

@function percentage($value, $points: 1) {
    $factor: 100;

    @for $i from 1 through $points {
        $factor: $factor * 10;
    }

    @return (round(get-num($value) * $factor) / $factor) * 100%;
}

@function round-to($value, $points: 2, $mode: 'round') {
    $factor: 1;

    @for $i from 1 through $points {
        $factor: $factor * 10;
    }

    $result: ($value * $factor);

    @if $mode == 'round' {
        $result: round($result) / $factor;
    } @else if $mode == 'ceil' {
        $result: ceil($result) / $factor;
    } @else if $mode == 'floor' {
        $result: floor($result) / $factor;
    }

    @return $result;
}

@function scale-size($map, $value, $side: 'width') {
    $width: map-get($map, 'width');
    $height: map-get($map, 'height');

    @if $side == 'width' {
        $height-scaled: (($value / $width) * $height);

        @if unit($value) == 'px' {
            $height-scaled: ceil($height-scaled);
        }

        @return $height-scaled;
    }

    @if $side == 'height' {
        $width-scaled: ((($value / $height) * $width));

        @if unit($value) == 'px' {
            $width-scaled: ceil($width-scaled);
        }

        @return $width-scaled;
    }
}


//## Colors
//
//*

@function shade($key: 1, $map: $grays) {
    @return map-get($map, $key + '00');
}


//## Type & Grid
//
//*

//### Type
@function spacer($key: null, $factor: 1) {
    @if not $key {
        $key: 3;
    }

    @return map-get($spacers, $key) * $factor;
}

//### Grid
@function box($key: lg) {
    @return map-get($container-max-widths, $key);
}

@function gap($key: null, $factor: 1) {
    @if not $key {
        $key: 3;
    }

    @return map-get($gaps, $key) * $factor;
}


//## Media Screens
//
//*

@function screen($breakpoint: lg, $desktop-first: false) {
    $key: $breakpoint;
    @if not $key {
        $key: lg;
    }

    $value: map-get($grid-breakpoints, $key);
    @if $desktop-first {
        $value: $value - 1;
    }

    @return $value;
}
